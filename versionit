#!/bin/bash

SCRIPT_VERSION="1.3.2"

ARGV=()
for var in "$@"; do
    [ "$var" == '-f' ] && FORCE_ARG=1 || ARGV+=("$var")
done

VERSION_ARG=${ARGV[0]}
TARGET_ARG=${ARGV[1]}

if [[ -n $VERSION_ARG ]] && [[ $VERSION_ARG != "-" ]] && [[ ! $VERSION_ARG =~ ^[0-9] ]]
then
  echo ""
  echo "VersionIt $SCRIPT_VERSION is a script to change the version in several places:"
  echo "  * Xcode project version and build number"
  echo "  * Settings.bundle first DefaultValue"
  echo "  * podspec version"
  echo "  * git tag"
  echo "  * CHANGELOG.md [Unreleased] heading"
  echo "  * README.md occurences of old version number"
  echo ""
  echo "  Usage:"
  echo "    $(basename "$0") [<version>] [<target>] [-f]"
  echo ""
  echo "      <version>     Version number."
  echo "                    Empty or '-' to increment last number."
  echo "                    0 to change only build number."
  echo ""
  echo "      <target>      Name of folder containing Info.plist and Settings.bundle."
  echo "                    Empty to use xcodeproj filename."
  echo ""
  echo "      -f            Execute silently without asking to review changes"
  echo ""
  echo "  Examples:"
  echo "    $(basename "$0")                      Increment version"
  echo "    $(basename "$0") - SomeTarget         Increment version for SomeTarget"
  echo "    $(basename "$0") 0                    Only change build number"
  echo "    $(basename "$0") 3.0.0 SomeTarget     Change version of SomeTarget to 3.0.0"
  echo ""
  exit
fi

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ensure current branch is master
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$BRANCH" != "master" ]
then
  echo -e "${RED}Current branch is '$BRANCH', please checkout 'master'.${NC}"
  exit
fi

# ensure not behind remote/master
git fetch
COMMITS_BEHIND_ORIGIN=$(git log HEAD..origin/master --oneline | wc -l | tr -d '[:space:]')
if [ "$COMMITS_BEHIND_ORIGIN" != "0" ]
then
  echo -e "${RED}Local repo is not in sync with origin.${NC}"
  git status
  exit
fi

# find version
TARGET_PATTERN=${TARGET_ARG:-[0-9]}
LATEST_GIT_TAG=$(git describe --tags --always --abbrev=0 --match "${TARGET_PATTERN}*")
LAST_VERSION=${LATEST_GIT_TAG#"$TARGET_ARG-"}
if [[ -z $VERSION_ARG ]] || [[ $VERSION_ARG == "-" ]]
then
  VERSION=$(echo "$LAST_VERSION" | awk -F. '{OFS="."; $NF+=1; print $0}')
else
  VERSION="$VERSION_ARG"
fi

# ensure new version is greater than last one
if [[ $VERSION != 0 ]] && [[ $LAST_VERSION =~ [[:digit:]] ]] && [[ ! $LAST_VERSION < $VERSION ]]
then
  echo -e "${RED}Latest version is $LAST_VERSION, please use a greater version number.${NC}"
  exit
fi
[[ $VERSION == 0 ]] && CURRENT_VERSION="$LAST_VERSION" || CURRENT_VERSION="$VERSION"
[[ -z $TARGET_ARG ]] && TAG="$CURRENT_VERSION" || TAG="$TARGET_ARG-$CURRENT_VERSION"

# change to dir with xcodeproj
CURRENT_DIR=$(pwd)
PROJECT_DIR=$(find . -maxdepth 1 -type d -name '*.xcodeproj' -print -quit | xargs dirname)
cd "$PROJECT_DIR"

# find target
PROJECT_NAME=$(find . -maxdepth 1 -type d -name '*.xcodeproj' -print -quit | xargs -I {} basename {} .xcodeproj)
TARGET=${2:-$PROJECT_NAME}

# change Xcode project version
if [[ $VERSION != 0 ]]
then
  xcrun agvtool new-marketing-version "$VERSION"
fi

# change Xcode project build number
NUMBER_OF_COMMITS=$(git rev-list HEAD --count)
xcrun agvtool new-version -all "$NUMBER_OF_COMMITS"

# git add changes
git add -u "$TARGET"/Info.plist
git checkout \*Info.plist
find . -maxdepth 2 -name 'project.pbxproj' -exec git add -u {} \;

# update Settings.bundle
SETTINGS_PLIST="./$TARGET/Settings.bundle/Root.plist"
if [ -f "$SETTINGS_PLIST" ]
then
  /usr/libexec/PlistBuddy -c "Set :PreferenceSpecifiers:0:DefaultValue $CURRENT_VERSION '($NUMBER_OF_COMMITS)'" "$SETTINGS_PLIST"
  git add "$SETTINGS_PLIST"
fi

# update CHANGELOG.md [Unreleased]
if [[ $VERSION != 0 ]]
then
  cd "$CURRENT_DIR"
  CHANGELOG=CHANGELOG.md
  if [ ! -f $CHANGELOG ]
  then
    CHANGELOG=../CHANGELOG.md
  fi
  if [ -f $CHANGELOG ]
  then
      DATE=$(date +%Y-%m-%d)
      echo "Updating $CHANGELOG"
      sed -i '' "s/^## *\[[a-zA-Z]*\].*/## [$TAG] - $DATE/" $CHANGELOG
      git add $CHANGELOG
  fi
fi

# update README.md
if [[ $VERSION != 0 ]]
then
  cd "$CURRENT_DIR"
  README=README.md
  if [ ! -f $README ]
  then
    README=../README.md
  fi
  if [ -f $README ]
  then
    echo "Updating $README"
    ESCAPED_LAST_VERSION=${LAST_VERSION//./\\.}
    sed -i '' "s/$ESCAPED_LAST_VERSION/$TAG/" $README
    git add $README
  fi
fi

# update podspec
if [[ $VERSION != 0 ]]
then
  PODSPEC=$(find . -name "*.podspec")
  if [ -z "$PODSPEC" ]
  then
    PODSPEC=$(find .. -maxdepth 1 -name '*.podspec')
  fi
  if [ -n "$PODSPEC" ]
  then
    echo "Updating $PODSPEC"
    sed -i '' "s/$LAST_VERSION/$VERSION/" "$PODSPEC"
    git add "$PODSPEC"
  fi
fi

# review changes
if [ -z "$FORCE_ARG" ]
then
  git diff --cached
  echo -e "\n\n${BLUE}Confirm these changes and commit?${NC}"
  select yn in Yes No Cherrypick
  do
    case $yn in
      Yes ) break;;
      No ) echo -e "${BLUE}\nSorry, my bad. Please review git status and cleanup the mess.${NC}"; exit;;
      Cherrypick ) git reset; git add -p; break;;
    esac
  done
fi

# commit and push
if [[ $VERSION != 0 ]]
then
  git commit -m "bump version to $TAG"
  git tag "$TAG"
else
  git commit -m "bump build to $TAG ($NUMBER_OF_COMMITS)"
fi
git push
git push --tags

# update cocoapods
if [ -n "$PODSPEC" ]
then
  POD_NAME=$(basename "$PODSPEC" .podspec)
  pod trunk info "$POD_NAME" &>/dev/null
  if [ $? -eq 0 ]
  then
    cd "$(dirname "$PODSPEC")"
    pod trunk push --allow-warnings
  fi
fi

echo -e "${GREEN}\nAll done!${NC}"
